<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-28 at 22:55:55.
 */
class WordQuoteLineItemTest extends PHPUnit_Framework_TestCase {

    /**
     * @var QuoteLineItem
     */
    protected $object;
    private $currentItemEnum;

    /**
     * Providing a basic TR+CE word quote line item for each test.
     */
    protected function setUp() {
        $this->currentItemEnum = QuoteLineItemEnum::enum()->tr_ce_fuzzy_text;
        $this->object = QuoteLineItem::withWords($this->currentItemEnum, 33, new QuoteInfoClass());
        $this->object->setDefaultRushFeePercentage(0.25);
        $this->object->setBaseRatePerUnit(0.08);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    /**
     * @covers QuoteLineItem::getActualSellPricePerUnit
     * @covers QuoteLineItem::isCustomPricePerUnit
     * @covers QuoteLineItem::setCustomRatePerUnit
     */    

    public function testShouldSuccessfullyDisplayActualSellPricePerUnit() {
        $this->assertEquals(
                0.13333, $this->object->getActualSellPricePerUnit()
        );
        
        $this->assertEquals(
            false, $this->object->isCustomPricePerUnit()
        );

        $this->object->setCustomRatePerUnit(0.140);
        $this->assertEquals(
                0.140, $this->object->getActualSellPricePerUnit()
        );
        
        $this->assertEquals(
            true, $this->object->isCustomPricePerUnit()
        );
    }

    /**
     * @covers QuoteLineItem::getBaseRatePerUnit
     * @covers QuoteLineItem::setBaseRatePerUnit
     */
    public function testShouldSuccessfullyReportLineItemBaseRatePerUnit() {
        $this->assertEquals(
                0.08, $this->object->getBaseRatePerUnit()
        );
        $this->object->setBaseRatePerUnit(1.75);
        $this->assertEquals(
                1.75, $this->object->getBaseRatePerUnit()
        );
    }

    /**
     * @covers QuoteLineItem::setCustomRatePerUnit
     * @covers QuoteLineItem::getCustomRatePerUnit
     */
    public function testShouldSuccessfullyReportLineItemCustomRatePerUnit() {
        $this->object->setCustomRatePerUnit(0.555);

        $this->assertEquals(
                0.555, $this->object->getCustomRatePerUnit()
        );
    }

    /**
     * @covers QuoteLineItem::getWorkUnitType
     */
    public function testShouldSuccessfullyReportLineItemUnitType() {
        $this->assertEquals(
                "words", $this->object->getWorkUnitType()
        );
    }

    /**
     * @covers QuoteLineItem::getRushFee
     */
    public function testShouldSuccessfullyComputeLineItemRushFee() {
        $this->object->setCustomRatePerUnit(0.140);
        $this->assertEquals(
                1.16, $this->object->getRushFee()
        );
    }

    /**
     * @covers QuoteLineItem::getFormattedCostTotal
     */
    public function testShouldSuccessfullyProvideLineItemCostTotalInUSCurrency() {
        $this->assertEquals(
                "$2.64", $this->object->getFormattedCostTotal()
        );
    }

    /**
     * @covers QuoteLineItem::getFormattedActualSellPriceTotal
     */
    public function testShouldSuccessfullyProvideLineItemActualSellPriceTotalInUSCurrency() {
        $this->object->setCustomRatePerUnit(0.140);
        $this->assertEquals(
                "$4.62", $this->object->getFormattedActualSellPriceTotal()
        );
    }

    /**
     * @covers QuoteLineItem::getCalculatedSellPricePerUnit
     */
    public function testShouldSuccessfullyReportCalculatedSellPricePerUnit() {
        $this->assertEquals(
                0.13333, $this->object->getCalculatedSellPricePerUnit()
        );
    }

    /**
     * @covers QuoteLineItem::getActualSellPricePerUnit
     * @covers QuoteLineItem::setCustomRatePerUnit
     */
    public function testShouldSuccessfullyReportActualSellPricePerUnit() {
        $this->assertEquals(
                0.13333, $this->object->getActualSellPricePerUnit()
        );

        $this->object->setCustomRatePerUnit(0.60);

        $this->assertEquals(
                0.60, $this->object->getActualSellPricePerUnit()
        );
    }
    
    /**
     * @covers QuoteLineItem::getActualGrossMarginPercentage
     * @covers QuoteLineItem::setCustomRatePerUnit
     */
    public function testShouldProperlyReportActualGrossMarginPercentage() {
        $this->object->setCustomRatePerUnit(0.140);
        $this->assertEquals(
                42.9, $this->object->getActualGrossMarginPercentage()
        );
        $this->object->setCustomRatePerUnit(0.180);
        $this->assertEquals(
                55.6, $this->object->getActualGrossMarginPercentage()
        );
    }
}



class QuoteInfoClass implements IQuoteItem {
    public function getCategory() {
        return "LinguistItem";
    }

    public function getId() {
        return "2222333";
    }

    public function getName() {
        return "A linguist Item";
    }

    public function getSourceLang() {
        return "Englisn (US)";
    }

    public function getTargetLang() {
        return "French (France)";
    }

    public function getType() {
        
    }

    public function setCategory($cat) {
        
    }

    public function setId($id) {
        
    }

    public function setName($name) {
        
    }

    public function setType($type) {
        
    }

}