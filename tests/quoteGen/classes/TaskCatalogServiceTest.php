<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-09 at 19:13:39.
 */
class TaskCatalogServiceTest extends PHPUnit_Framework_TestCase {

    /**
     * @var TaskCatalogService
     */
    protected $object;
    protected $items;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new TaskCatalogService;
        $this->items = $this->generateCategorySupportItems();
        foreach($this->items as $value) {
            $this->object->addItem($value);
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers TaskCatalogService::addItem
     * @todo   Implement testAddItem().
     */
    public function testGetItems() {
        foreach($this->items as $value) {
            $testItems = $this->object->getItems($value);
        
            $this->assertEquals(
                    1, count($testItems)
            );
        }
    }
    
    /**
     * @covers TaskCatalogService::printArray
     * @todo   Implement testPrintArray().
     */
    public function testAddItem() {
        // Get the first object that was added, and add it again...
        $testitem = array_values($this->items)[0];
        $this->assertEquals(
                1, count($this->object->getItems($testitem))
        );
        
        $this->object->addItem($testitem);
        
        $this->assertEquals(
                2, count($this->object->getItems($testitem))
        );
    }

    /**
     * @covers TaskCatalogService::printArray
     * @todo   Implement testPrintArray().
     */
    public function testPrintArray() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    
    public function testEnumerateCatalog() {
        echo "\r\n";
        $this->object->enumerateCatalog();
    }
    
    private function generateCategorySupportItems() {
        $testItems = array();
        array_push($testItems, new TestSupport("Linguistic", "English (en)", "French (France)"));
        array_push($testItems, new TestSupport("Engineering", "English (en)", "French (France)"));
        array_push($testItems, new TestSupport("QA", "English (en)", "French (France)"));
        array_push($testItems, new TestSupport("Linguistic", "English (en)", "Spanish (Spain)"));
        array_push($testItems, new TestSupport("Engineering", "English (en)", "Spanish (Spain)"));
        array_push($testItems, new TestSupport("QA", "English (en)", "Spanish (Spain)"));
        array_push($testItems, new TestSupport("Linguistic", "English (en)", "Italian)"));
        array_push($testItems, new TestSupport("Engineering", "English (en)", "Italian"));
        array_push($testItems, new TestSupport("QA", "English (en)", "Italian"));
        
        return $testItems;
    }
    
}

class TestSupport implements ICatagorySupport {
    private $cat;
    private $soureLang;
    private $targLang;
    public function __construct($cat, $sourceLang, $targLang) {
        $this->cat = $cat;
        $this->soureLang = $sourceLang;
        $this->targLang = $targLang;
    }
    
    public function getCategory() {
        return $this->cat;
    }

    public function getSourceLang() {
        return $this->soureLang;
    }

    public function getTargetLang() {
        return $this->targLang;
    }

}
